import("rtt_ros")
ros.import("rtt_rosnode")
ros.import("rtt_actionlib")
ros.import("rtt_std_msgs")
ros.import("rtt_sensor_msgs")
ros.import("rtt_actionlib_msgs")
ros.import("rtt_trajectory_msgs")
ros.import("rtt_control_msgs")
ros.import("rtt_cartesian_trajectory_msgs")
ros.import("rtt_force_control_msgs")
ros.import("rtt_hi_msgs")

ros.import("conman");
ros.import("rtt_conman_msgs");
ros.import("conman_ros");
ros.import("hardware_interface")
ros.import("data_export")
ros.import("sarkofag_regulator")
ros.import("oro_joint_state_publisher")
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
ros.import("sarkofag_kinematic")
ros.import("controller_common");
ros.import("port_split");



//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.002, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

//------------------------------------------------------------------------------
//-- SarkofagHardwareInterface
//------------------------------------------------------------------------------
loadComponent("SarkofagHardwareInterface","HardwareInterface")
//setActivity("SarkofagHardwareInterface", 0.002, 5, ORO_SCHED_RT)
SarkofagHardwareInterface.loadService("rosparam")
SarkofagHardwareInterface.rosparam.getAll()
//SarkofagHardwareInterface.configure()

// Motors Regulators

loadComponent("SarkofagRegulator_0","SarkofagRegulator")
SarkofagRegulator_0.loadService("rosparam")
SarkofagRegulator_0.rosparam.getAll()
SarkofagRegulator_0.configure()

loadComponent("SarkofagDataExport","DataExport")
SarkofagDataExport.loadService("rosparam")
SarkofagDataExport.rosparam.getAll()
SarkofagDataExport.configure()

addPeer("SarkofagHardwareInterface", "SarkofagRegulator_0")
addPeer("SarkofagHardwareInterface", "SarkofagDataExport")

//SarkofagHardwareInterface.configure()

// double port spliter

loadComponent("SarkofagPortDoubleSplit_hw_cp","PortDoubleSplit")
SarkofagPortDoubleSplit_hw_cp.loadService("rosparam")
SarkofagPortDoubleSplit_hw_cp.rosparam.getAll()
SarkofagPortDoubleSplit_hw_cp.configure()


// double port aggregate

loadComponent("SarkofagPortDoubleAggregate_hw_p","PortDoubleAggregate")
SarkofagPortDoubleAggregate_hw_p.loadService("rosparam")
SarkofagPortDoubleAggregate_hw_p.rosparam.getAll()
SarkofagPortDoubleAggregate_hw_p.configure()


loadComponent("SarkofagM2J","SarkofagM2J")
//setActivity("SarkofagM2J", 0.02, 5, ORO_SCHED_RT)
SarkofagM2J.configure()

loadComponent("SarkofagKinematicModel","SarkofagKinematicModel")
SarkofagKinematicModel.configure()

connect("SarkofagM2J.JointPosition","SarkofagKinematicModel.JointPosition", ConnPolicy())

loadComponent("SarkofagJ2M","SarkofagJ2M")
SarkofagJ2M.configure()

loadComponent("SarkofagSplineTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")

SarkofagSplineTrajectoryGeneratorJoint.loadService("rosparam");
SarkofagSplineTrajectoryGeneratorJoint.rosparam.getAll();


connect("SarkofagM2J.JointPosition","SarkofagSplineTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorJoint.JointPositionCommand","SarkofagJ2M.JointPosition", ConnPolicy())
SarkofagSplineTrajectoryGeneratorJoint.configure()

loadComponent("SarkofagSplineTrajectoryGeneratorMotor", "InternalSpaceSplineTrajectoryGenerator")

SarkofagSplineTrajectoryGeneratorMotor.loadService("rosparam");
SarkofagSplineTrajectoryGeneratorMotor.rosparam.getAll();


connect("SarkofagPortDoubleAggregate_hw_p.OutputPort","SarkofagSplineTrajectoryGeneratorMotor.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorMotor.JointPositionCommand","SarkofagPortDoubleSplit_hw_cp.InputPort", ConnPolicy())


SarkofagSplineTrajectoryGeneratorMotor.configure()



addPeer("scheme", "SarkofagHardwareInterface");
addPeer("scheme", "SarkofagPortDoubleSplit_hw_cp")
addPeer("scheme", "SarkofagPortDoubleAggregate_hw_p")
addPeer("scheme", "SarkofagM2J");
addPeer("scheme", "SarkofagKinematicModel");
addPeer("scheme", "SarkofagJ2M");
addPeer("scheme", "SarkofagSplineTrajectoryGeneratorJoint");
addPeer("scheme", "SarkofagSplineTrajectoryGeneratorMotor");




scheme.addBlock("SarkofagHardwareInterface");

SarkofagHardwareInterface.configure();

## Connect
connect("SarkofagHardwareInterface.computedReg_in_sarkofag_0","SarkofagRegulator_0.computedPwm_out", ConnPolicy())
connect("SarkofagRegulator_0.posInc_in","SarkofagHardwareInterface.posInc_out_sarkofag_0", ConnPolicy())
connect("SarkofagRegulator_0.deltaInc_in","SarkofagHardwareInterface.deltaInc_out_sarkofag_0", ConnPolicy())

connect("SarkofagDataExport.MotorPosition_sarkofag_0","SarkofagHardwareInterface.MotorPosition_sarkofag_0", ConnPolicy())
connect("SarkofagDataExport.MotorIncrement_sarkofag_0","SarkofagHardwareInterface.MotorIncrement_sarkofag_0", ConnPolicy())
connect("SarkofagDataExport.MotorCurrent_sarkofag_0","SarkofagHardwareInterface.MotorCurrent_sarkofag_0", ConnPolicy())

connect("SarkofagPortDoubleAggregate_hw_p.OutputPort","SarkofagM2J.MotorPosition", ConnPolicy())
connect("SarkofagJ2M.MotorPosition", "SarkofagPortDoubleSplit_hw_cp.InputPort", ConnPolicy())

connect("SarkofagPortDoubleSplit_hw_cp.OutputPort_0","SarkofagHardwareInterface.MotorPositionCommand_sarkofag_0", ConnPolicy())

connect("SarkofagPortDoubleAggregate_hw_p.InputPort_0","SarkofagHardwareInterface.MotorPosition_sarkofag_0", ConnPolicy())

scheme.addBlock("SarkofagPortDoubleSplit_hw_cp")
scheme.addBlock("SarkofagPortDoubleAggregate_hw_p")


scheme.addBlock("SarkofagM2J");
scheme.addBlock("SarkofagKinematicModel");
scheme.latchConnections("SarkofagPortDoubleSplit_hw_cp", "SarkofagHardwareInterface", true);
scheme.addBlock("SarkofagJ2M");
scheme.addBlock("SarkofagSplineTrajectoryGeneratorJoint");
scheme.addBlock("SarkofagSplineTrajectoryGeneratorMotor");

// ROS Interface

//
// SarkofagSplineTrajectoryActionJoint
// 

loadComponent("SarkofagSplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivity("SarkofagSplineTrajectoryActionJoint",0.01 ,2 ,ORO_SCHED_RT)
SarkofagSplineTrajectoryActionJoint.loadService("rosparam");
SarkofagSplineTrajectoryActionJoint.rosparam.getAll();

SarkofagSplineTrajectoryActionJoint.loadService("actionlib")
SarkofagSplineTrajectoryActionJoint.actionlib.connect("/sarkofag_arm/spline_trajectory_action_joint")

connect("SarkofagSplineTrajectoryActionJoint.trajectoryPtr","SarkofagSplineTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("SarkofagM2J.JointPosition","SarkofagSplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorJoint.JointPositionCommand","SarkofagSplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())


SarkofagSplineTrajectoryActionJoint.configure()


//
// SarkofagSplineTrajectoryActionMotor
// 

loadComponent("SarkofagSplineTrajectoryActionMotor", "InternalSpaceSplineTrajectoryAction")
setActivity("SarkofagSplineTrajectoryActionMotor",0.01 ,2 ,ORO_SCHED_RT)
SarkofagSplineTrajectoryActionMotor.loadService("rosparam");
SarkofagSplineTrajectoryActionMotor.rosparam.getAll();

SarkofagSplineTrajectoryActionMotor.loadService("actionlib")
SarkofagSplineTrajectoryActionMotor.actionlib.connect("/sarkofag_arm/spline_trajectory_action_motor")

connect("SarkofagSplineTrajectoryActionMotor.trajectoryPtr","SarkofagSplineTrajectoryGeneratorMotor.trajectoryPtr", ConnPolicy())
connect("SarkofagM2J.JointPosition","SarkofagSplineTrajectoryActionMotor.JointPosition", ConnPolicy())
connect("SarkofagSplineTrajectoryGeneratorMotor.JointPositionCommand","SarkofagSplineTrajectoryActionMotor.JointPositionCommand", ConnPolicy())

SarkofagSplineTrajectoryActionMotor.configure()

// joint states
loadComponent("SarkofagJntPub", "JointStatePublisher");
setActivity("SarkofagJntPub", 0.01, 2, ORO_SCHED_RT);
SarkofagJntPub.loadService("rosparam");
SarkofagJntPub.rosparam.getAll();

connect("SarkofagM2J.JointPosition", "SarkofagJntPub.JointPosition", ConnPolicy());
connect("SarkofagM2J.JointPosition", "SarkofagJntPub.JointVelocity", ConnPolicy());
connect("SarkofagM2J.JointPosition", "SarkofagJntPub.JointEffort", ConnPolicy());

stream("SarkofagJntPub.joint_state", ros.comm.topic("/joint_states"));

SarkofagJntPub.configure()

// motor states
loadComponent("SarkofagMotPub", "JointStatePublisher");
setActivity("SarkofagMotPub", 0.01, 2, ORO_SCHED_RT);
SarkofagMotPub.loadService("rosparam");
SarkofagMotPub.rosparam.getAll();

connect("SarkofagPortDoubleAggregate_hw_p.OutputPort", "SarkofagMotPub.JointPosition", ConnPolicy());
connect("SarkofagPortDoubleAggregate_hw_p.OutputPort", "SarkofagMotPub.JointVelocity", ConnPolicy());
connect("SarkofagPortDoubleAggregate_hw_p.OutputPort", "SarkofagMotPub.JointEffort", ConnPolicy());

stream("SarkofagMotPub.joint_state", ros.comm.topic("/motor_states"));

SarkofagMotPub.configure()

stream("SarkofagKinematicModel.WristOutputPose", ros.comm.topic("/cartesian_position"))

## Start it
scheme.start()
SarkofagHardwareInterface.start()
SarkofagRegulator_0.start()
SarkofagDataExport.start()
SarkofagPortDoubleSplit_hw_cp.start()
SarkofagPortDoubleAggregate_hw_p.start()
SarkofagM2J.start()
SarkofagKinematicModel.start()
SarkofagJ2M.start()
SarkofagJntPub.start()
SarkofagMotPub.start()
SarkofagSplineTrajectoryActionJoint.start()
SarkofagSplineTrajectoryActionMotor.start()


